package main;

import java.awt.Canvas;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;

import game.GamePanel;

public class MainPanel extends Canvas implements Runnable{
	private static final long serialVersionUID = 1L;
	public final static int WIDTH = 1006,HEIGHT = 735;		//default sizes is 1000x700
	private boolean running = false;
	private GamePanel gamePanel;
	private Thread thread;
	
	public MainPanel(){
		new Frame(this);
		gamePanel = new GamePanel();
		start();
	}
	
	public void render(){
		BufferStrategy bS = this.getBufferStrategy();
		if(bS == null){
			this.createBufferStrategy(3);
			return;
		}
		Graphics g = bS.getDrawGraphics();
		gamePanel.render(g);
		g.dispose();
		bS.show();
	}
	
	public void tick(){
	}
	
	
	
	public synchronized void start(){

		thread = new Thread(this);
		thread.start();
		running = true;
	}
	
	public synchronized void stop(){
		int counter = 0;
        while(counter<1000)
        {
            counter++;
            try{
                running = false;
                thread.join();
            }catch (Exception e){
                e.printStackTrace();
            }
        }
	}
	
	@Override
	public void run() {
		this.requestFocus();
        long lastTime = System.nanoTime();
        double amountOfTicks = 60.0;
        double ns = 1000000000 / amountOfTicks;
        double delta = 0;
        long timer = System.currentTimeMillis();
        while(running)
        {
        	long now = System.nanoTime();
        	delta += (now - lastTime) / ns;
        	lastTime = now;
        	while(delta >= 1)
        	{
        		this.tick();
        		delta--;
        	}
        	if(running)
				this.render();
        	if(System.currentTimeMillis() - timer > 1000){
        		timer += 1000;
        		//System.out.println("FPS: " + frames);
        	}
        }
        this.stop();
	}
	public static void main(String[] args){
		new MainPanel();
	}
}
